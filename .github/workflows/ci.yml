name: CI

on: pull_request

jobs:
    build-test-scan:
        name: Build, test, scan
        runs-on: ubuntu-latest

        steps:
            - name: Checkout push or pull request HEAD
              uses: actions/checkout@v2
            - name: Convert the shallow clone to an unshallow one
              run: git fetch --unshallow
            - name: Request the number of commits on the pull request
              id: number_of_commits_on_pr_request
              uses: octokit/graphql-action@v2.x
              with:
                  query: |
                      query NumberOfCommitsOnPR($repositoryowner: String!, $repositoryname: String!, $prnumber: Int!) {
                          repository(owner: $repositoryowner, name: $repositoryname) {
                              pullRequest(number: $prnumber) {
                                  commits {
                                      totalCount
                                  }
                              }
                          }
                      }
                  repositoryowner: ${{ github.event.repository.owner.login }}
                  repositoryname: ${{ github.event.repository.name }}
                  prnumber: ${{ github.event.number }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            - name: Get the number of commits on the pull request from the response
              id: number_of_commits_on_pr_result
              uses: gr2m/get-json-paths-action@v1.x
              with:
                  json: ${{ steps.number_of_commits_on_pr_request.outputs.data }}
                  commits_count: 'repository.pullRequest.commits.totalCount'
            - name: Check if the number of commits on the pull request is equal to one
              run: |
                  if [ "${{ steps.number_of_commits_on_pr_result.outputs.commits_count }}" -ne 1 ]; then
                      echo "The pull request must consist of exactly one commit. Please squash your commits into one."
                      exit 1
                  fi
            - name: Set up Node.js version
              uses: actions/setup-node@v1
              with:
                  node-version: 13
            - name: Install dependencies
              run: npm ci
            - name: Lint the commit message of the pull request
              run: npx commitlint --from HEAD^ --to HEAD --config .commitlintrc.json
            - uses: actions/cache@v1
              with:
                  path: ~/.m2/repository
                  key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
                  restore-keys: |
                      ${{ runner.os }}-maven-
            - name: Set up Java version
              uses: actions/setup-java@v1
              with:
                  java-version: 11
                  java-package: jdk
                  architecture: x64
            - name: Set up Neo4j in Docker
              run: docker run -d -p 7687:7687 --env=NEO4J_AUTH=neo4j/secret neo4j:latest
            - name: Build and test
              run: ./mvnw clean verify
              env:
                  NEO4J_ENCRYPTION_KEY_V1: VGhpcyBpcyBhIGR1bW1tbW1tbW1tbW1tbW15IGtleS4=
            - name: Scan with SonarCloud
              run: ./mvnw sonar:sonar -Psonar -Dsonar.login=${{ secrets.SONAR_TOKEN }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
